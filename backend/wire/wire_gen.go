// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/yourusername/viblog/internal/config"
	"github.com/yourusername/viblog/internal/infrastructure/auth"
	"github.com/yourusername/viblog/internal/infrastructure/database"
	"github.com/yourusername/viblog/internal/infrastructure/logger"
	"github.com/yourusername/viblog/internal/infrastructure/repository"
	"github.com/yourusername/viblog/internal/interface/http/handler"
	"github.com/yourusername/viblog/internal/interface/http/router"
	"github.com/yourusername/viblog/internal/usecase/admin"
	"github.com/yourusername/viblog/internal/usecase/post"
	"github.com/yourusername/viblog/internal/usecase/user"
	"go.uber.org/zap"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitializeApp initializes the application with all dependencies
func InitializeApp(cfg *config.Config) (*router.Router, func(), error) {
	logger, err := provideLogger(cfg)
	if err != nil {
		return nil, nil, err
	}
	jwtService := provideJWTService(cfg)
	db, cleanup, err := provideDatabase(cfg)
	if err != nil {
		return nil, nil, err
	}
	userRepository := repository.NewUserRepository(db)
	registerUseCase := user.NewRegisterUseCase(userRepository)
	loginUseCase := user.NewLoginUseCase(userRepository)
	getProfileUseCase := user.NewGetProfileUseCase(userRepository)
	updateProfileUseCase := user.NewUpdateProfileUseCase(userRepository)
	userHandler := provideUserHandler(registerUseCase, loginUseCase, getProfileUseCase, updateProfileUseCase, jwtService)
	postRepository := repository.NewPostRepository(db)
	listUseCase := post.NewListUseCase(postRepository)
	getUseCase := post.NewGetUseCase(postRepository)
	postHandler := providePostHandler(listUseCase, getUseCase)
	commentHandler := provideCommentHandler()
	commentRepository := repository.NewCommentRepository(db)
	getDashboardUseCase := admin.NewGetDashboardUseCase(userRepository, postRepository, commentRepository)
	listUsersUseCase := admin.NewListUsersUseCase(userRepository)
	deleteUserUseCase := admin.NewDeleteUserUseCase(userRepository)
	listCommentsUseCase := admin.NewListCommentsUseCase(commentRepository)
	deleteCommentUseCase := admin.NewDeleteCommentUseCase(commentRepository, postRepository)
	categoryRepository := repository.NewCategoryRepository(db)
	listCategoriesUseCase := admin.NewListCategoriesUseCase(categoryRepository)
	createCategoryUseCase := admin.NewCreateCategoryUseCase(categoryRepository)
	updateCategoryUseCase := admin.NewUpdateCategoryUseCase(categoryRepository)
	deleteCategoryUseCase := admin.NewDeleteCategoryUseCase(categoryRepository)
	tagRepository := repository.NewTagRepository(db)
	listTagsUseCase := admin.NewListTagsUseCase(tagRepository)
	createTagUseCase := admin.NewCreateTagUseCase(tagRepository)
	updateTagUseCase := admin.NewUpdateTagUseCase(tagRepository)
	deleteTagUseCase := admin.NewDeleteTagUseCase(tagRepository)
	adminHandler := provideAdminHandler(getDashboardUseCase, listUsersUseCase, deleteUserUseCase, listCommentsUseCase, deleteCommentUseCase, listCategoriesUseCase, createCategoryUseCase, updateCategoryUseCase, deleteCategoryUseCase, listTagsUseCase, createTagUseCase, updateTagUseCase, deleteTagUseCase)
	notificationHandler := provideNotificationHandler()
	routerRouter := router.New(cfg, logger, jwtService, userHandler, postHandler, commentHandler, adminHandler, notificationHandler)
	return routerRouter, func() {
		cleanup()
	}, nil
}

// wire.go:

func provideLogger(cfg *config.Config) (*zap.Logger, error) {
	return logger.NewZapLogger(cfg.Logging)
}

func provideDatabase(cfg *config.Config) (*gorm.DB, func(), error) {
	db, err := database.NewPostgresDB(cfg)
	if err != nil {
		return nil, nil, err
	}

	cleanup := func() {
		sqlDB, _ := db.DB()
		if sqlDB != nil {
			sqlDB.Close()
		}
	}

	if err := database.RunMigrations(db); err != nil {
		cleanup()
		return nil, nil, err
	}

	return db, cleanup, nil
}

func provideJWTService(cfg *config.Config) *auth.JWTService {
	return auth.NewJWTService(cfg.JWT.Secret, cfg.JWT.RefreshSecret)
}

func provideUserHandler(
	registerUC *user.RegisterUseCase,
	loginUC *user.LoginUseCase,
	getProfileUC *user.GetProfileUseCase,
	updateProfileUC *user.UpdateProfileUseCase,
	jwtService *auth.JWTService,
) *handler.UserHandler {
	return handler.NewUserHandler(registerUC, loginUC, getProfileUC, updateProfileUC, jwtService)
}

func providePostHandler(
	listUC *post.ListUseCase,
	getUC *post.GetUseCase,
) *handler.PostHandler {
	return handler.NewPostHandler(listUC, getUC)
}

func provideCommentHandler() *handler.CommentHandler {

	return handler.NewCommentHandler(nil)
}

func provideAdminHandler(
	dashboardUC *admin.GetDashboardUseCase,
	listUsersUC *admin.ListUsersUseCase,
	deleteUserUC *admin.DeleteUserUseCase,
	listCommentsUC *admin.ListCommentsUseCase,
	deleteCommentUC *admin.DeleteCommentUseCase,
	listCategoriesUC *admin.ListCategoriesUseCase,
	createCategoryUC *admin.CreateCategoryUseCase,
	updateCategoryUC *admin.UpdateCategoryUseCase,
	deleteCategoryUC *admin.DeleteCategoryUseCase,
	listTagsUC *admin.ListTagsUseCase,
	createTagUC *admin.CreateTagUseCase,
	updateTagUC *admin.UpdateTagUseCase,
	deleteTagUC *admin.DeleteTagUseCase,
) *handler.AdminHandler {
	return handler.NewAdminHandler(
		dashboardUC,
		listUsersUC,
		deleteUserUC,
		listCommentsUC,
		deleteCommentUC,
		listCategoriesUC,
		createCategoryUC,
		updateCategoryUC,
		deleteCategoryUC,
		listTagsUC,
		createTagUC,
		updateTagUC,
		deleteTagUC,
	)
}

func provideNotificationHandler() *handler.NotificationHandler {

	return handler.NewNotificationHandler(nil)
}
